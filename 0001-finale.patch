From 5d37b6f12afe106a0347c1ca68fc77c695a1a0ae Mon Sep 17 00:00:00 2001
From: COLMANRL <iamcolman6@gmail.com>
Date: Mon, 26 Feb 2024 15:40:55 +0300
Subject: [PATCH] finale

---
 src/App.tsx   | 18 ++++++++++++++++--
 src/Graph.tsx | 14 ++++++++++----
 2 files changed, 26 insertions(+), 6 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..b83348b 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,19 +31,31 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    if(this.state.showGraph){
     return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
+    let x = 0;
+    const interval= setInterval(()=>{
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
+      this.setState({
+        data: serverResponds,
+        showGraph:true,
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
+      });
     });
-  }
+    x++;
+    if (x > 1000) {
+      clearInterval(interval);
+    }
+  },100);
+}
 
   /**
    * Render the App react component
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..24849fc 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -48,7 +48,13 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
       // Add more Perspective configurations here.
+  
       elem.load(this.table);
+      elem.setAttribute('view','y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates','{"stock":"distinct count", "top_ask_price":"avg", "top_bid_price":"avg", "timestamp":"distinct count"}');
     }
   }
 
@@ -61,8 +67,8 @@ class Graph extends Component<IProps, {}> {
         // Format the data from ServerRespond to the schema
         return {
           stock: el.stock,
-          top_ask_price: el.top_ask && el.top_ask.price || 0,
-          top_bid_price: el.top_bid && el.top_bid.price || 0,
+          top_ask_price: el.top_ask && el.top_ask.price||0,
+          top_bid_price: el.top_bid && el.top_bid.price||0,
           timestamp: el.timestamp,
         };
       }));
-- 
2.42.0.windows.2

